searchState.loadedDescShard("libc_core", 0, "This crate provides the <code>libc</code> types.\nThis file contains constants used in the libc crate.\nThis module provides the <code>libc</code> types for ELF (Executable …\nThis module provides the <code>libc</code> types for Epoll (event …\nThis module provides the <code>libc</code> types for FCNTL (file …\nThis module provides the <code>libc</code> types for FUTEX (fast …\nThis module provides the <code>libc</code> types for libc internal use.\nThis module provides the <code>libc</code> types for IOCTL.\nThis module provides the <code>libc</code> types for MMAN (memory …\nThis module provides the <code>libc</code> types for Other unclassified …\nThis module provides the <code>libc</code> types for Poll (polling).\nThis module provides the <code>libc</code> types for Resource (system …\nThis module provides the <code>libc</code> types for SCHED (scheduling).\nThis module provides the <code>libc</code> types for Signal.\nThis module provides the <code>libc</code> types for Termios.\nThis module provides the <code>libc</code> types for Time (time …\nThis module provides the <code>libc</code> types for TIMES (time …\nThis module provides the <code>libc</code> types for Types.\nThis module provides the <code>libc</code> types for UTSNAME (Unix Time …\n表示更新时间为当前时间（用于 utimensat …\n表示不修改对应的时间字段（用于 utimensat …\nELF auxiliary vector (auxv) entry type\n动态链接器的基址（即 ld.so 的加载地址）\n基础平台名称的指针（字符串）\n每秒的时钟滴答数（用于 <code>times()</code> 等函数）\nD-cache（数据缓存）大小\n有效组 ID（EGID）\n有效用户 ID（EUID）\n程序入口点（Entry Point）\n…\n命令行中可执行文件路径的地址（如 “/bin/ls…\n运行时标志，通常为 0\nx86 FPU 控制字（FPUCW）\n实际组 ID（GID）\n硬件能力位（bitmask），如 SSE/AVX 支持\n第二组 HWCAP（arm64/aarch64）\nI-cache（指令缓存）大小\n被忽略的项\nPowerPC 平台专用，被忽略\n如果是非 ELF 二进制（a.out 格式），为 …\n结束标志\n页大小（单位字节），如 4096\n程序头表（Program Header Table）在内存中的地址\n每个程序头的大小（以字节为单位）\n程序头的数量\nCPU 平台名称的指针（如 “x86_64”）\n指向随机数种子（stack 上的 16 字节随机值）\n是否是安全模式（非 suid/guid），0 = 否，1 = …\n指向 vsyscall 区域的函数地址（如 <code>gettimeofday()</code>…\n指向 VDSO ELF 映射的起始地址\n通用缓存大小\n实际用户 ID（UID）\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n添加一个新的监听目标到 epoll …\n从 epoll …\n文件描述符发生错误（error）\n边缘触发（Edge-Triggered）模式\n…\n对端挂起或关闭连接（hang up）\n…\n有系统消息可读（通常未使用）\n事件触发一次后就自动删除（one-shot 模式）\n表示对应的文件描述符可写（低水位标记）\n有高优先级数据可读（如带外数据）\n带外数据可读（band read）\n流被对端关闭，半关闭状态（对端调用 …\n普通数据可读（normal read）\n唤醒系统 suspend 状态（需要 CAP_BLOCK_SUSPEND …\n带外数据可写（band write）\n普通数据可写（normal write）\n<code>epoll_ctl</code> 操作类型，用于管理 epoll …\n表示 epoll 事件的结构体（对应 Linux 的 …\nEpoll 事件类型（类似 poll 的事件掩码）\n修改已添加目标的监听事件（epoll_ctl(epfd, …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n用户数据（如 fd 或标识符），epoll 不做解释\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n事件类型（如可读、可写等，使用 …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n将 EpollEventType 转换为 PollEvent\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n访问模式掩码（Access mode mask）\n每次写入都追加到末尾（Append on each write）\n启用异步 I/O（Enable signal-driven I/O）\n使用有效权限而非实际权限 (use effective access …\n当前目录的文件描述符\n删除目录而非文件 (remove directory instead of file)\n跟随符号链接 (follow symbolic links)\n不跟随符号链接 (do not follow symbolic links)\n执行 exec 时关闭（Close on exec）\n文件不存在时创建（Create file if it does not …\n绕过页缓存直接 I/O（Direct disk access）\n打开目标必须为目录（Fail if not a directory）\n数据写入后立即同步（Synchronize data writes）\ndup\nlike F_DUPFD, but additionally set the close-on-exec flag\n与 O_CREAT 一起使用，文件存在时报错（Error …\n文件描述符控制命令\nget close_on_exec\nget file-&gt;f_flags\nGet record locking info.\n启用大文件支持（Enable large files）\n不更新 atime（Do not update access time）\n不将设备设为控制终端（Do not make device a …\n不跟随符号链接（Do not follow symlinks）\n非阻塞模式（Non-blocking I/O）\n文件打开标志，对应 Linux 的 open(2) …\n仅解析路径，不打开目标（Open just the path）\n只读（Read Only）\n读写（Read and Write）\n同步读操作（Same as O_SYNC）\nset/clear close_on_exec\nset file-&gt;f_flags\nSet record locking info (non-blocking).\nSet record locking info (blocking).\n数据和元数据写入后同步（Synchronize all …\n创建匿名临时文件（Unnamed temporary file）\n打开文件时清空内容（Truncate file to zero …\n只写（Write Only）\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n…\n…\n标志：表示 futex …\n使用文件描述符的 Futex 操作（较少用）\nFutex 操作类型枚举\n获取 Priority Inheritance 锁\n将等待队列中的线程重新排队到另一个 Futex\n尝试获取 Priority Inheritance 锁（非阻塞）\n释放 Priority Inheritance 锁\n等待操作，线程阻塞直到被唤醒\n等待指定的位集合（bitset），类似于 …\n唤醒等待的线程\n执行复杂的唤醒和重新排队组合操作\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n表示使用该信号的默认处理方式（default …\n表示忽略该信号（ignore） …\n信号处理函数的结构体（对应 C 的 …\n…\n标志位，用于指定处理行为，如 …\nReturns the argument unchanged.\n信号处理函数指针，类似于 C 中的 void (*…\nCalls <code>U::from(self)</code>.\n…\n…\n设置 <code>close-on-exec</code> 标志（在 <code>exec</code> …\n设置非阻塞 I/O（rustc 编译器也会用这个 ioctl …\n取消 <code>close-on-exec</code> 标志（在 <code>exec</code> …\n获取 RTC（实时时钟）的当前时间（用于 RTC …\n获取当前串口设置（termio 结构体）\n获取当前串口设置（termios 结构体）\n立即设置串口配置（termio 结构体）\n刷新输入输出缓冲区后设置串口配置\n等待输出缓冲区刷新后设置串口配置\n立即设置串口配置（termios 结构体）\n刷新输入输出缓冲区后设置串口配置\n等待输出缓冲区刷新后再设置串口配置\n获取当前终端的前台进程组 ID\n获取终端窗口大小（通常与 struct winsize …\n设置当前终端的前台进程组 ID\n设置终端窗口大小\nTeletype 设备相关 ioctl …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n…\n…\n拒绝写操作（通常用于文件系统写保护）\n可执行权限，映射区域允许执行代码\n映射可执行代码（允许执行权限）\n文件映射（默认标志）\n使用固定地址映射，映射必须在指定地址\n固定映射，但不覆盖已有映射\n堆栈向下增长区域（如线程栈）\n使用大页（HugeTLB）\n使其他缓存失效（使缓存区域无效）\n映射锁定在内存中，避免换出\nmsync 同步标志，用于控制 msync 行为\nMAP 标志位（用于 mmap 等内存映射操作）\n内存映射保护标志（mmap 的 prot 参数） MUSL: …\n非阻塞映射\n不保留交换空间（swap）\n预先加载页面（降低缺页中断）\n…\n可读权限，映射区域可被读取\n共享映射，写入会直接影响文件内容\n验证共享映射（共享或私有），与 …\n映射用作线程栈\n同步映射（同步内存访问）\n…\n…\n可写权限，映射区域可被写入\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nArchitecture-specific command for the <code>arch_prctl</code> syscall.\nGet Thread Local Storage (TLS) base\nGet Per-CPU base\nSet Thread Local Storage (TLS) base\nSet Per-CPU base\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n错误事件（如写管道时接收端关闭） …\n挂起事件（如对端关闭连接） …\n有数据可读\nLinux …\n无事件（默认值）\n无效的请求（如监听了一个无效的 fd） …\n可写数据（缓冲区未满）\n有紧急数据可读（带外数据）\nPoll 事件类型（类似于 epoll 的事件掩码）\n用于 poll 系统调用的文件描述符结构体\n带外数据可读\n远端关闭（对端 shutdown write 或关闭 socket）\n普通数据可读（等价于 …\n从 epoll 或 poll …\n带外数据可写\n普通数据可写（等价于 …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n…\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n文件描述符（File Descriptor），要监视的对象\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\n实际发生的事件，由内核填写\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n资源限制结构体（对应 C 的 <code>struct rlimit</code>） …\n资源使用情况结构体（对应 C 的 <code>struct rusage</code>）\n当前资源软限制（soft …\nReturns the argument unchanged.\nReturns the argument unchanged.\n数据段内存使用量（已废弃）\n输入操作（块设备读取）的次数\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n堆栈段内存使用量（已废弃）\n索引页的使用数量（已废弃）\n…\n最大资源限制（hard …\n…\n页面缺页异常数（软缺页，不涉及磁盘 IO）\n接收的 IPC 消息数（已废弃）\n发送的 IPC 消息数（已废弃）\n非自愿上下文切换次数（被内核抢占）\n捕获的信号数量\n发生的交换（swap）次数\n自愿上下文切换次数（如等待锁）\n输出操作（块设备写入）的次数\n内核态运行时间（单位：秒 + 微秒）\n用户态运行时间（单位：秒 + 微秒）\n进程退出时自动清除 TID（通常用于 futex …\n在指定地址写入子进程的 TID（child 设置）\n被废弃，曾用于标记 detached 线程\n与父进程共享打开的文件描述符\n与父进程共享文件系统信息（当前目录、root …\n启用 I/O 上下文的共享（Linux 2.6.25+）\n使用新的 cgroup 命名空间（隔离控制组）\n使用新的 IPC 命名空间（隔离 System V IPC）\n使用新的网络命名空间（network namespace）\n使用新的挂载命名空间（mount namespace）\n使用新的 PID 命名空间（隔离进程号）\n使用新的 time 命名空间（Linux 5.6+）\n使用新的用户命名空间（user namespace）\n使用新的 UTS 命名空间（隔离主机名/域名）\n设置父进程为新进程的 …\n在指定地址写入子进程的 TID（parent 设置）\n将 PIDFD 文件描述符写入 clone …\n被调试器使用，子进程会被 trace（如 ptrace）\n设置 TLS（线程局部存储）指针\n与父进程共享信号处理函数\n与父进程共享 System V 信号量\n与父进程成为线程（共享 …\n禁用子进程被 trace\n以 vfork 语义启动子进程，阻塞父进程直到 …\n…\n指定发送给子进程的信号（低 8 位），如 …\n克隆标志，用于 <code>clone(2)</code> 或 <code>clone3(2)</code> …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n异常终止（Abort）\n报警时钟（Alarm clock）\n…\n总线错误（Bus error）\nPOSIX 线程：取消信号\n子进程终止或状态变化（Child）\n继续执行（Continue）\n…\n浮点异常（Floating-point exception）\n终端挂起（Hangup）\n非法指令（Illegal instruction）\n交互式中断（Interrupt）\n异步 I/O（I/O now possible）\n强制终止（Kill，不可被捕获或忽略）\n存放信号处理上下文的机器寄存器的结构体\n…\n管道破裂（Broken pipe）\n性能分析计时器到期（Profiling alarm）\n电源失败（Power failure）\n退出（Quit）\n实时信号（Real-time signals）的起始编号。\n实时信号 10\n实时信号 11\n实时信号 12\n实时信号 13\n实时信号 14\n实时信号 15\n实时信号 16\n实时信号 17\n实时信号 18\n实时信号 19\n实时信号 20\n实时信号 21\n实时信号 22\n实时信号 23\n实时信号 24\n实时信号 25\n实时信号 26\n实时信号 27\n实时信号 28\n实时信号 29\n实时信号 3（Real-time signal 3）\n实时信号 30\n实时信号 31\n实时信号 4\n实时信号 5\n实时信号 6\n实时信号 7\n实时信号 8\n实时信号 9\n最大实时信号（Real-time signal max）\n段错误（Segmentation fault）\n…\n停止进程（不可忽略）\nPOSIX 线程：同步调用信号\n非法系统调用（Bad syscall）\nPOSIX …\n…\n终止请求（Termination）\nPOSIX 线程：定时器信号\n断点（Trace/breakpoint trap）\n终端停止（来自 TTY 的 Ctrl+Z）\n后台读取控制终端\n后台写入控制终端\n信号处理上下文的结构体\n紧急条件（Urgent socket）\n用户定义信号 1\n用户定义信号 2\n备用信号栈（alternate signal stack）\n虚拟计时器到期（Virtual alarm）\n窗口大小改变（Window size change）\n超过 CPU 时间限制\n超过文件大小限制\n浮点寄存器的内存表示\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n标志位，用于表示上下文的状态或其他标记\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n从数字构造 <code>SignalNum</code> …\n通用寄存器的上下文信息\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\n判断是否为实时信号（Real-time Signal）。\nYield a set of contained flags values.\nYield a set of contained named flags values.\n链接寄存器，保存返回地址或跳转地址\n获取信号的位掩码（bit mask）。\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n获取信号的编号（number）。\n…\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n信号掩码，用于记录哪些信号被屏蔽\n…\n…\n栈，保存上下文的栈信息\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n在输入 BREAK 时产生中断信号\n退格延迟设置0（无延迟）\n退格延迟设置1\n退格延迟标志掩码\n波特率常量（Baud Rate …\n忽略调制解调器状态线，允许本地连接\n回车延迟设置0（无延迟）\n回车延迟设置1\n回车延迟设置2\n回车延迟设置3\n回车延迟标志掩码\n启用接收器\n字符大小：5 位\n字符大小：6 位\n字符大小：7 位\n字符大小：8 位\n字符大小掩码（用于选择 CS5、CS6、CS7 或 …\n发送两位停止位，默认是一位停止位\n控制字符索引（Control Characters Index）\n控制模式标志（Control Modes Flags），对应 …\n启用输入字符回显\n启用 ERASE …\n输入 KILL 字符时回显一个新行\n在新行输入时回显换行符\n换页延迟设置0（无延迟）\n换页延迟设置1\n换页延迟标志掩码\n关闭调制解调器挂断控制（保持连接）\n…\n将输入的回车符 CR 转换为换行符 NL\n…\n忽略 BREAK 条件（输入中的断开信号）\n忽略输入的回车符 CR\n忽略奇偶校验错误的字符\n当输入缓冲区满时发出响铃\n将输入的换行符 NL 转换为回车符 CR\n启用输入奇偶校验检查\n允许产生信号，如 INTR, QUIT, SUSP\n去除输入字符的第 8 位\n…\nUTF-8 输入编码（Linux 特有）\n允许任何字符中断输出暂停（XON）\n启用 XON/XOFF 输入流控制\n启用 XON/XOFF 输出流控制\n输入模式标志（Input Modes Flags），对应 termios …\n本地模式标志（Local Modes Flags），对应 termios …\n新行延迟设置为0（无延迟）\n新行延迟设置为1（延迟）\n新行延迟标志掩码\n禁止输入或输出时刷新终端队列\n将输出中的回车符 CR 转换为换行符 NL\n填充字符使用 DEL（0x7f）\n用填充字符填充输出（如延迟输出）\n…\n将输出中的换行符 NL 转换为回车符 CR …\n输出换行符时不回车（不常用）\n不输出回车符 CR\n启用输出处理（如换行符转换）\n输出模式标志（Output Modes Flags），对应 …\n启用奇偶校验位\n标记奇偶校验错误的字符\n奇偶校验为奇校验，默认是偶校验\n制表符延迟设置0（无延迟）\n制表符延迟设置1\n制表符延迟设置2\n制表符延迟设置3\n制表符延迟标志掩码\n背景进程尝试写终端时发送 SIGTTOU 信号\n<code>termios</code> …\n丢弃输出字符\n文件结束字符，通常是 Ctrl-D\n额外的行结束字符（EOL）\n第二个额外的行结束字符（EOL2）\n删除字符，通常是退格键（Backspace）\n中断字符，通常是 Ctrl-C，用于发送中断信号\n删除整行字符\n下一字符字面量输入（转义下一个字符）\n读取时的最小字节数\n退出字符，通常是 Ctrl-\\\n重新打印字符，用于重新显示当前输入行\n开始字符，通常是 Ctrl-Q，用于软件流控制\n停止字符，通常是 Ctrl-S，用于软件流控制\n挂起字符，通常是 Ctrl-Z\n切换字符（不常用）\n垂直制表延迟设置0（无延迟）\n垂直制表延迟设置1\n垂直制表延迟标志掩码\n读取时的超时值（定时器）\n删除一个单词字符\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n终端特殊字符数组（Control …\n控制模式标志（Control …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\n输入模式标志（Input …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\n输入速度（Input speed），表示波特率\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n本地模式标志（Local modes），如是否启用 …\n行控制符，一般用于选择 <code>cc</code> …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n输出模式标志（Output …\n输出速度（Output speed），表示波特率\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n定时器结构体，表示间隔和当前值（对应 C …\nReturns the argument unchanged.\n重复触发的间隔时间（interval &gt; 0 …\nCalls <code>U::from(self)</code>.\n当前倒计时的剩余时间（初始超时时长）\n程序运行的时间\n子进程执行内核代码的时间\n子进程执行用户代码的时间\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n进程执行内核代码的时间\n进程执行用户代码的时间\nblock device\n…\ncharacter device\ndirectory\n…\nFIFO\nordinary regular file\nExecute/search permission, group.\nRead, write, execute/search by group.\nRead permission, group.\nWrite permission, group.\nIoVec structure\nsymbolic link\nNull\nExecute/search permission, others.\nRead, write, execute/search by others.\nRead permission, others.\nWrite permission, others.\nExecute/search permission, owner.\nRead, write, execute/search by owner.\nRead permission, owner.\nWrite permission, owner.\nSet-group-ID on execution.\nSet-user-ID on execution.\nsocket\n…\n信号屏蔽操作方式（用于 <code>sigprocmask</code> …\n信号处理掩码结构体\n信号处理掩码（sigset_t）\n文件的状态信息，类似于 Linux 中的 <code>stat</code> …\n文件系统状态结构体，用于 statfs …\n文件的状态信息，类似于 Linux 中的 <code>stat</code> …\nType\n…\nTimeVal structure\n…\n终端窗口大小结构体\n备用字段，通常用于对齐或扩展结构体大小\n填充字段，确保结构体大小对齐。\nGet a flags value with all known bits set.\n文件的最后访问时间（以 <code>TimeSpec</code> 表示）。\nBase address of the buffer\n…\n…\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n…\n文件系统中数据块的总数量\n…\n最优传输块大小（用于文件系统的 I/O …\n窗口的列数（以字符为单位）\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n文件的最后状态变更时间（以 <code>TimeSpec</code> …\n设备号，表示文件所在设备的标识符。\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n创建一个新的空信号集（无信号被阻塞）。\n创建一个新的空信号集（无信号被阻塞）。\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n可用的文件结点数\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n文件系统标识符（通常是一个唯一的 …\n…\n文件系统的类型（magic number，用于标识如 …\n文件所有者的组ID（GID）。\n修改当前信号集的行为。\n判断指定信号是否在信号集中。\ninode 号（索引节点号），唯一标识文件\ninode …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n将指定信号添加到信号集中。\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\n判断信号集是否为空。\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLength of the buffer\n文件类型和访问权限，使用 <code>StatMode</code> …\n文件的最后修改时间（以 <code>TimeSpec</code> 表示）。\n文件名（不定长，以空字符结尾，声明为 0 …\n支持的最大文件名长度（单位：字节）\n…\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n纳秒（Nanoseconds），有效范围为 0~999_999_999\n…\n从信号集中弹出一个信号\n…\n…\nThe intersection of a source flags value with the …\n从信号集中移除指定信号。\n窗口的行数（以字符为单位）\nseconds, range in 0~999999999\n秒（Seconds）\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n信号集，包含两个 64 位整数（128 …\n文件的大小，以字节为单位。\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n将 TimeSpec 转换为纳秒（nanoseconds）\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n文件所有者的用户ID（UID）。\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nmicroseconds, range in 0~999999\n窗口的宽度（以像素为单位）\n窗口的高度（以像素为单位）\n系统信息结构体（对应 <code>struct utsname</code>…\n域名，例如 “(none)” 或 “example.com”\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n机器架构，例如 “x86_64”\n主机名称，例如 “my-hostname”\n内核发行版本，例如 “5.15.0”\n操作系统名称，例如 “Linux”\n内核版本信息，例如 “#1 SMP PREEMPT_DYNAMIC ……")